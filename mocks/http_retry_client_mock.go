// Code generated by MockGen. DO NOT EDIT.
// Source: http/retryhttp/client.go
//
// Generated by this command:
//
//	mockgen -source=http/retryhttp/client.go -package=mocks -destination=mocks/http_retry_client_mock.go -mock_names=Client=HttpRetryClientMock
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	http "github.com/cash-track/gateway/http"
	retryhttp "github.com/cash-track/gateway/http/retryhttp"
	fasthttp "github.com/valyala/fasthttp"
	gomock "go.uber.org/mock/gomock"
)

// HttpRetryClientMock is a mock of Client interface.
type HttpRetryClientMock struct {
	ctrl     *gomock.Controller
	recorder *HttpRetryClientMockMockRecorder
	isgomock struct{}
}

// HttpRetryClientMockMockRecorder is the mock recorder for HttpRetryClientMock.
type HttpRetryClientMockMockRecorder struct {
	mock *HttpRetryClientMock
}

// NewHttpRetryClientMock creates a new mock instance.
func NewHttpRetryClientMock(ctrl *gomock.Controller) *HttpRetryClientMock {
	mock := &HttpRetryClientMock{ctrl: ctrl}
	mock.recorder = &HttpRetryClientMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *HttpRetryClientMock) EXPECT() *HttpRetryClientMockMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *HttpRetryClientMock) Do(req *fasthttp.Request, resp *fasthttp.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req, resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *HttpRetryClientMockMockRecorder) Do(req, resp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*HttpRetryClientMock)(nil).Do), req, resp)
}

// DoWithRetry mocks base method.
func (m *HttpRetryClientMock) DoWithRetry(req *fasthttp.Request, resp *fasthttp.Response, attempts uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoWithRetry", req, resp, attempts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoWithRetry indicates an expected call of DoWithRetry.
func (mr *HttpRetryClientMockMockRecorder) DoWithRetry(req, resp, attempts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoWithRetry", reflect.TypeOf((*HttpRetryClientMock)(nil).DoWithRetry), req, resp, attempts)
}

// WithReadTimeout mocks base method.
func (m *HttpRetryClientMock) WithReadTimeout(timeout time.Duration) http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithReadTimeout", timeout)
	ret0, _ := ret[0].(http.Client)
	return ret0
}

// WithReadTimeout indicates an expected call of WithReadTimeout.
func (mr *HttpRetryClientMockMockRecorder) WithReadTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithReadTimeout", reflect.TypeOf((*HttpRetryClientMock)(nil).WithReadTimeout), timeout)
}

// WithRetryAttempts mocks base method.
func (m *HttpRetryClientMock) WithRetryAttempts(attempts uint) retryhttp.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithRetryAttempts", attempts)
	ret0, _ := ret[0].(retryhttp.Client)
	return ret0
}

// WithRetryAttempts indicates an expected call of WithRetryAttempts.
func (mr *HttpRetryClientMockMockRecorder) WithRetryAttempts(attempts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRetryAttempts", reflect.TypeOf((*HttpRetryClientMock)(nil).WithRetryAttempts), attempts)
}

// WithWriteTimeout mocks base method.
func (m *HttpRetryClientMock) WithWriteTimeout(timeout time.Duration) http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithWriteTimeout", timeout)
	ret0, _ := ret[0].(http.Client)
	return ret0
}

// WithWriteTimeout indicates an expected call of WithWriteTimeout.
func (mr *HttpRetryClientMockMockRecorder) WithWriteTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithWriteTimeout", reflect.TypeOf((*HttpRetryClientMock)(nil).WithWriteTimeout), timeout)
}
