// Code generated by MockGen. DO NOT EDIT.
// Source: router/api/handler.go
//
// Generated by this command:
//
//	mockgen -source=router/api/handler.go -package=mocks -destination=mocks/api_handler_mock.go -mock_names=Handler=ApiHandlerMock
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	fasthttp "github.com/valyala/fasthttp"
	gomock "go.uber.org/mock/gomock"
)

// ApiHandlerMock is a mock of Handler interface.
type ApiHandlerMock struct {
	ctrl     *gomock.Controller
	recorder *ApiHandlerMockMockRecorder
}

// ApiHandlerMockMockRecorder is the mock recorder for ApiHandlerMock.
type ApiHandlerMockMockRecorder struct {
	mock *ApiHandlerMock
}

// NewApiHandlerMock creates a new mock instance.
func NewApiHandlerMock(ctrl *gomock.Controller) *ApiHandlerMock {
	mock := &ApiHandlerMock{ctrl: ctrl}
	mock.recorder = &ApiHandlerMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ApiHandlerMock) EXPECT() *ApiHandlerMockMockRecorder {
	return m.recorder
}

// AuthResetHandler mocks base method.
func (m *ApiHandlerMock) AuthResetHandler(ctx *fasthttp.RequestCtx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AuthResetHandler", ctx)
}

// AuthResetHandler indicates an expected call of AuthResetHandler.
func (mr *ApiHandlerMockMockRecorder) AuthResetHandler(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthResetHandler", reflect.TypeOf((*ApiHandlerMock)(nil).AuthResetHandler), ctx)
}

// AuthSetHandler mocks base method.
func (m *ApiHandlerMock) AuthSetHandler(ctx *fasthttp.RequestCtx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AuthSetHandler", ctx)
}

// AuthSetHandler indicates an expected call of AuthSetHandler.
func (mr *ApiHandlerMockMockRecorder) AuthSetHandler(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthSetHandler", reflect.TypeOf((*ApiHandlerMock)(nil).AuthSetHandler), ctx)
}

// CaptchaVerifyHandler mocks base method.
func (m *ApiHandlerMock) CaptchaVerifyHandler(ctx *fasthttp.RequestCtx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CaptchaVerifyHandler", ctx)
}

// CaptchaVerifyHandler indicates an expected call of CaptchaVerifyHandler.
func (mr *ApiHandlerMockMockRecorder) CaptchaVerifyHandler(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptchaVerifyHandler", reflect.TypeOf((*ApiHandlerMock)(nil).CaptchaVerifyHandler), ctx)
}

// FullForwardedHandler mocks base method.
func (m *ApiHandlerMock) FullForwardedHandler(ctx *fasthttp.RequestCtx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FullForwardedHandler", ctx)
}

// FullForwardedHandler indicates an expected call of FullForwardedHandler.
func (mr *ApiHandlerMockMockRecorder) FullForwardedHandler(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullForwardedHandler", reflect.TypeOf((*ApiHandlerMock)(nil).FullForwardedHandler), ctx)
}

// Healthcheck mocks base method.
func (m *ApiHandlerMock) Healthcheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthcheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// Healthcheck indicates an expected call of Healthcheck.
func (mr *ApiHandlerMockMockRecorder) Healthcheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthcheck", reflect.TypeOf((*ApiHandlerMock)(nil).Healthcheck))
}
