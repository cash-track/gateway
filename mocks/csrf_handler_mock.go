// Code generated by MockGen. DO NOT EDIT.
// Source: router/csrf/handler.go
//
// Generated by this command:
//
//	mockgen -source=router/csrf/handler.go -package=mocks -destination=mocks/csrf_handler_mock.go -mock_names=Handler=CsrfHandlerMock
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	fasthttp "github.com/valyala/fasthttp"
	gomock "go.uber.org/mock/gomock"
)

// CsrfHandlerMock is a mock of Handler interface.
type CsrfHandlerMock struct {
	ctrl     *gomock.Controller
	recorder *CsrfHandlerMockMockRecorder
	isgomock struct{}
}

// CsrfHandlerMockMockRecorder is the mock recorder for CsrfHandlerMock.
type CsrfHandlerMockMockRecorder struct {
	mock *CsrfHandlerMock
}

// NewCsrfHandlerMock creates a new mock instance.
func NewCsrfHandlerMock(ctrl *gomock.Controller) *CsrfHandlerMock {
	mock := &CsrfHandlerMock{ctrl: ctrl}
	mock.recorder = &CsrfHandlerMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *CsrfHandlerMock) EXPECT() *CsrfHandlerMockMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *CsrfHandlerMock) Handler(h fasthttp.RequestHandler) fasthttp.RequestHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", h)
	ret0, _ := ret[0].(fasthttp.RequestHandler)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *CsrfHandlerMockMockRecorder) Handler(h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*CsrfHandlerMock)(nil).Handler), h)
}

// RotateTokenHandler mocks base method.
func (m *CsrfHandlerMock) RotateTokenHandler(ctx *fasthttp.RequestCtx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RotateTokenHandler", ctx)
}

// RotateTokenHandler indicates an expected call of RotateTokenHandler.
func (mr *CsrfHandlerMockMockRecorder) RotateTokenHandler(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateTokenHandler", reflect.TypeOf((*CsrfHandlerMock)(nil).RotateTokenHandler), ctx)
}
