// Code generated by MockGen. DO NOT EDIT.
// Source: http/client.go
//
// Generated by this command:
//
//	mockgen -source=http/client.go -package=mocks -destination=mocks/http_client_mock.go Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	http "github.com/cash-track/gateway/http"
	fasthttp "github.com/valyala/fasthttp"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockClient) Do(req *fasthttp.Request, resp *fasthttp.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req, resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockClientMockRecorder) Do(req, resp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockClient)(nil).Do), req, resp)
}

// WithReadTimeout mocks base method.
func (m *MockClient) WithReadTimeout(timeout time.Duration) http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithReadTimeout", timeout)
	ret0, _ := ret[0].(http.Client)
	return ret0
}

// WithReadTimeout indicates an expected call of WithReadTimeout.
func (mr *MockClientMockRecorder) WithReadTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithReadTimeout", reflect.TypeOf((*MockClient)(nil).WithReadTimeout), timeout)
}

// WithWriteTimeout mocks base method.
func (m *MockClient) WithWriteTimeout(timeout time.Duration) http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithWriteTimeout", timeout)
	ret0, _ := ret[0].(http.Client)
	return ret0
}

// WithWriteTimeout indicates an expected call of WithWriteTimeout.
func (mr *MockClientMockRecorder) WithWriteTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithWriteTimeout", reflect.TypeOf((*MockClient)(nil).WithWriteTimeout), timeout)
}
