// Code generated by MockGen. DO NOT EDIT.
// Source: http/client.go
//
// Generated by this command:
//
//	mockgen -source=http/client.go -package=mocks -destination=mocks/http_client_mock.go -mock_names=Client=HttpClientMock
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	http "github.com/cash-track/gateway/http"
	fasthttp "github.com/valyala/fasthttp"
	gomock "go.uber.org/mock/gomock"
)

// HttpClientMock is a mock of Client interface.
type HttpClientMock struct {
	ctrl     *gomock.Controller
	recorder *HttpClientMockMockRecorder
}

// HttpClientMockMockRecorder is the mock recorder for HttpClientMock.
type HttpClientMockMockRecorder struct {
	mock *HttpClientMock
}

// NewHttpClientMock creates a new mock instance.
func NewHttpClientMock(ctrl *gomock.Controller) *HttpClientMock {
	mock := &HttpClientMock{ctrl: ctrl}
	mock.recorder = &HttpClientMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *HttpClientMock) EXPECT() *HttpClientMockMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *HttpClientMock) Do(req *fasthttp.Request, resp *fasthttp.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req, resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *HttpClientMockMockRecorder) Do(req, resp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*HttpClientMock)(nil).Do), req, resp)
}

// WithReadTimeout mocks base method.
func (m *HttpClientMock) WithReadTimeout(timeout time.Duration) http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithReadTimeout", timeout)
	ret0, _ := ret[0].(http.Client)
	return ret0
}

// WithReadTimeout indicates an expected call of WithReadTimeout.
func (mr *HttpClientMockMockRecorder) WithReadTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithReadTimeout", reflect.TypeOf((*HttpClientMock)(nil).WithReadTimeout), timeout)
}

// WithWriteTimeout mocks base method.
func (m *HttpClientMock) WithWriteTimeout(timeout time.Duration) http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithWriteTimeout", timeout)
	ret0, _ := ret[0].(http.Client)
	return ret0
}

// WithWriteTimeout indicates an expected call of WithWriteTimeout.
func (mr *HttpClientMockMockRecorder) WithWriteTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithWriteTimeout", reflect.TypeOf((*HttpClientMock)(nil).WithWriteTimeout), timeout)
}
