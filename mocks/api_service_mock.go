// Code generated by MockGen. DO NOT EDIT.
// Source: service/api/service.go
//
// Generated by this command:
//
//	mockgen -source=service/api/service.go -package=mocks -destination=mocks/api_service_mock.go -mock_names=Service=ApiServiceMock
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	fasthttp "github.com/valyala/fasthttp"
	gomock "go.uber.org/mock/gomock"
)

// ApiServiceMock is a mock of Service interface.
type ApiServiceMock struct {
	ctrl     *gomock.Controller
	recorder *ApiServiceMockMockRecorder
	isgomock struct{}
}

// ApiServiceMockMockRecorder is the mock recorder for ApiServiceMock.
type ApiServiceMockMockRecorder struct {
	mock *ApiServiceMock
}

// NewApiServiceMock creates a new mock instance.
func NewApiServiceMock(ctrl *gomock.Controller) *ApiServiceMock {
	mock := &ApiServiceMock{ctrl: ctrl}
	mock.recorder = &ApiServiceMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ApiServiceMock) EXPECT() *ApiServiceMockMockRecorder {
	return m.recorder
}

// ForwardRequest mocks base method.
func (m *ApiServiceMock) ForwardRequest(ctx *fasthttp.RequestCtx, body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardRequest", ctx, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForwardRequest indicates an expected call of ForwardRequest.
func (mr *ApiServiceMockMockRecorder) ForwardRequest(ctx, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardRequest", reflect.TypeOf((*ApiServiceMock)(nil).ForwardRequest), ctx, body)
}

// Healthcheck mocks base method.
func (m *ApiServiceMock) Healthcheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthcheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// Healthcheck indicates an expected call of Healthcheck.
func (mr *ApiServiceMockMockRecorder) Healthcheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthcheck", reflect.TypeOf((*ApiServiceMock)(nil).Healthcheck))
}
