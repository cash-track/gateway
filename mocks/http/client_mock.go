// Code generated by MockGen. DO NOT EDIT.
// Source: http/client.go
//
// Generated by this command:
//
//	mockgen -source=http/client.go -package=httpmock -destination=mocks/http/client_mock.go -mock_names=Client=ClientMock
//

// Package httpmock is a generated GoMock package.
package httpmock

import (
	reflect "reflect"
	time "time"

	http "github.com/cash-track/gateway/http"
	fasthttp "github.com/valyala/fasthttp"
	gomock "go.uber.org/mock/gomock"
)

// ClientMock is a mock of Client interface.
type ClientMock struct {
	ctrl     *gomock.Controller
	recorder *ClientMockMockRecorder
}

// ClientMockMockRecorder is the mock recorder for ClientMock.
type ClientMockMockRecorder struct {
	mock *ClientMock
}

// NewClientMock creates a new mock instance.
func NewClientMock(ctrl *gomock.Controller) *ClientMock {
	mock := &ClientMock{ctrl: ctrl}
	mock.recorder = &ClientMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ClientMock) EXPECT() *ClientMockMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *ClientMock) Do(req *fasthttp.Request, resp *fasthttp.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req, resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *ClientMockMockRecorder) Do(req, resp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*ClientMock)(nil).Do), req, resp)
}

// WithReadTimeout mocks base method.
func (m *ClientMock) WithReadTimeout(timeout time.Duration) http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithReadTimeout", timeout)
	ret0, _ := ret[0].(http.Client)
	return ret0
}

// WithReadTimeout indicates an expected call of WithReadTimeout.
func (mr *ClientMockMockRecorder) WithReadTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithReadTimeout", reflect.TypeOf((*ClientMock)(nil).WithReadTimeout), timeout)
}

// WithWriteTimeout mocks base method.
func (m *ClientMock) WithWriteTimeout(timeout time.Duration) http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithWriteTimeout", timeout)
	ret0, _ := ret[0].(http.Client)
	return ret0
}

// WithWriteTimeout indicates an expected call of WithWriteTimeout.
func (mr *ClientMockMockRecorder) WithWriteTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithWriteTimeout", reflect.TypeOf((*ClientMock)(nil).WithWriteTimeout), timeout)
}
